ch
Brief introduction to Decimal Floating Point
 为什么我们需要Decimal Floating Point (DFP) ?浮点数想必大家都很熟悉，它是一个很重要的数据类型。它不仅被几乎所有的编程语言支持，连硬件厂商也会提供特殊的寄存器和运算单元对其进行支持。为了能够更高效的表示，同时，也为了实现上面的方便，浮点数都是以二进制的形式进行存储的。因此，我们常见的浮点数都是根据IEEE 754标准定义的格式，以二进制形式进行表示的。 用二进制表示浮点数，虽然在硬件实现上高效，方便，但也带来问题。 我们日常使用的浮点数都是十进制的，因此，我们在利用机器对十进制浮点数进行操作是，就不得不先把它转为二进制浮点数，再进行计算。这个转换，就会造成精度的丢失。虽然这个丢失是微乎其微的，对于普通的应用程序不够成影响，但对于那些需要进行高精度计算的程序，却是致命的。因此，程序员不得不采取一些特别的方法来解决这些精度丢失问题。 要解决这个精度丢失问题，最直接的办法就是在硬件层次实现十进制浮点数表示以及操作。也可以从语言层级提供十进制表示的浮点数的支持，然后用软件模拟它的所有操作。其实很多语言已经支持了十进制浮点数了，比如COBOL，C#等。然而，作为号称完美介于程序员和硬件之间的C语言，却没有。因此，IEEE754 对此进行了修改，增加了十进制浮点数的支持。 C/C++语言中的十进制浮点数(DFP)类型 虽然C/C++已经意识到DFP数据类型的重要，然而要加入到标准不是一朝一夕的事情，目前，DFP数据类型仍然还停留在TR(Technical Report)中，还没有正式被标准采纳。 ISO/IEC WDTR 24732规定的DFP数据类型有三种，分别为_Decimal32， _Decimal64， _Decimal128。分别为float,double和long double对应，前者是十进制表示，后者是二进制表示。对于DFP常量，分别有DF，DD和DL后缀与之对应。比如1E-6DF。其实这个后缀有很多形式，大小写组合，具体可以参考DFP的标准规范。这个规范已经被提交到C标准委员会了。 而C++对DFP的支持仍然还在讨论中。据说，可能会在C++1X(C++11后面的下一个标准)中采纳DFP，因为制定C++11的时间太短，来不及引入DFP。 编译器对DFP的支持 GCC对DFP的支持 因为C语言的TR ISO/IEC WDTR 24732 已经对DFP的数据类型以及操作进行了规范，并已经提交到委员会，虽然还没有被正式确定下来，但变化应该不大。因此，gcc已经慢慢的开始支持dfp了。笔者用的gcc 4.7已经可以很好的支持dfp。 cat a.c void fun() { _Decimal32 d; float f = d; } gcc a.c -c; echo $? 0 但是，早期的gcc版本是不支持dfp的，那么如果要用到dfp该怎么办呢？ ibm 在gcc的基础上进行完善，特地做了一个叫做advanced toolchain的开发包，利用这个开发包，就可以让给gcc支持dfp。 G++ 对dfp的支持 C++ TR ISO/IEC JTC1 SC22 WG21 N2732 里面系统的阐述C++语言要如何支持DFP。 既要支持C语言引入的新的数据类型_Decimal32/64/128,同时，也引入一个新的类declmal32/64/128。 这个类的声明是在头文件 decimal/decimal . 因此，用户用新的g++编译器(比如4.7)，就可以直接include decimal/decimal ,然后 就可以定义类型为decimal32的数据了。 至于对C里面引入的数据类型_Decimal32/64/128的支持，目前每个版本的g++的实现还没有统一。有些版本是通过 typedef std::decimal::decimal32 _Decimal32 来实现的，而有些版本是利用g++ 提供的attribute SD|DD|TD来实现。typedef float _Decimal32 __attribute__((mode(SD))); 更多可以参考gcc bug XLC/C++对dfp的支持 XLC/C++是支持dfp的。 在aix平台上，你只要在编译的时候指定-qdfp 选项，编译器前端就能够识别数据类型 _Decimal32/64/128,然后能够自动的链接到IBM提供的dfp runtime库，链接运行。而在linux平台下，ibm没有提供runtime库，因此，我们不得不依赖第三方库 advance toolchain(AT). 我们提供一个preview版本的driver xlC_dfp, 它会使用另外一个configure file，把当前系统默认的头文件路径，运行库路径，从原来的gcc换成AT。我们之前已经提过，AT是支持dfp的，所以，我们只需要换一个driver xlC_dfp 加上选项-qdfp，前端就能够识别DFP数据类型了。但仅仅这样还不够，我们还需要指定-ldfp让linker去链接AT提供的runtime。因为我们在Linux平台下是不提供dfp的runime的。 所以总结如下 在aix平台下，要使用dfp 特性，需要： xlC test.C -qdfp 而linux平台下，则要 xlC_dfp test.C -qdfp -ldfp 