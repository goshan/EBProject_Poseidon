ch
WAS6.1里定制配置单元和节点的SSL配置
 内容提要： 本文介绍如果使用ikeyman定制创建WAS6.1 ND环境里使用的密钥库、信任库和证书，并定制配置ND环境的SSL通信。 正文： 一. 使用ikeyman工具创建密钥库/信任库文件，创建自签署证书，将证书添加到信任库； 1. 使用ikeyman创建单元作用域的密钥库文件cellkey.p12（PKCS12是WAS6.1里默认使用的格式，其他格式如JKS也是支持的，具体请参考信息中心），并创建一个自签署的&ldquo;个人证书&rdquo;： 创建密钥库： 根据提示提供一个密钥库密码，确认密码，然后点击&ldquo;确定&rdquo;： 从下拉列表里选择&ldquo;个人证书&rdquo;，点击&ldquo;新建自签署证书&rdquo;： 输入信息，然后点击&ldquo;确定&rdquo;： 在&ldquo;个人证书&rdquo;下面能看到新创建的&ldquo;CellKey&rdquo;，选中后点击&ldquo;查看/编辑&hellip;&rdquo;，能够看到证书的信息： 2. 创建单元级别的信任库文件celltrust.p12： 创建信任库： 根据提示提供一个信任库密码： 3. 创建节点级别的密钥库文件nodekey.p12，并创建自签署的&ldquo;个人证书&rdquo;： 创建密钥库： 根据提示提供一个密钥库密码： 在&ldquo;个人证书&rdquo;下创建一个节点级别的自签署证书（方法类似单元级别的步骤）： 点击&ldquo;查看/编辑&hellip;&rdquo;，可以看到证书详细信息： 4. 创建节点级别的信任库文件nodetrust.p12： 创建信任库： 根据提示提供一个信任库密码： 5. 把密钥库里的个人证书导出： 打开nodekey.p12，输入密码： 在&ldquo;个人证书&rdquo;下选择刚才创建的证书，点击&ldquo;抽取证书，保存成.arm格式的文件： 类似的，把cellkey.p12里的个人证书也导出来： 6. 把上面两步导出的两个个人证书（.arm文件）分别都导入到单元/节点级别的信任库里： 打开信任库，选择&ldquo;签署人证书&rdquo;，点击&ldquo;添加&hellip;&rdquo;，选择刚才导出的.arm文件，&ldquo;确定&rdquo;： 根据提示输入一个证书的标号： 点击&ldquo;查看/编辑&hellip;&rdquo;，能够看到证书的详细信息： 同样的步骤，把单元级别的个人证书也导入进来： 查看证书详细内容： 类似的方法，把两个证书添加到单元级别的信任库里（celltrust.p12）： 二. 通过WAS管理控制台创建新的密钥库/信任库，SSL配置，并绑定到相应的作用域： 1．创建单元级别的密钥库/信任库，SSL配置，并绑定到单元级别的作用域： 在&ldquo;安全性&rdquo;下选择&ldquo;SSL证书和密钥管理&rdquo;，点击&ldquo;管理端点安全配置&rdquo;： 点击进入单元级别的配置： 点击&ldquo;密钥库和证书&rdquo;： 点击&ldquo;新建&rdquo;： 新建一个单元级别的密钥库配置，使用刚才创建的cellkey.p12文件： 类似的，再新建一个单元级别的信任库，使用刚才创建的celltrust.p12文件： 回到上一级菜单，点击&ldquo;SSL配置&rdquo;： 新建一个SSL配置： 使用刚刚创建的单元级别的密钥库/信任库，点击&ldquo;获取证书别名&rdquo;，下面会自动列出默认的证书： 回到上一级菜单，在&ldquo;SSL配置&rdquo;下拉列表里选择新创建的SSL配置，点击&ldquo;更新证书别名列表&rdquo;，下面的证书别名下拉菜单会自动更新： 2．创建节点级别的密钥库/信任库，SSL配置，并绑定到节点级别的作用域： 在&ldquo;管理端点安全配置&rdquo;的拓扑图中，点击进入某个节点的配置： 下面的步骤都和单元级别类似，这里只列出各步骤截图，并做一些必要的补充说明，重复部分不再说明： 刚才创建的单元级别的配置在节点作用域也是可见的，因为SSL配置具有继承关系： 请确认&ldquo;覆盖继承的值&rdquo;是勾选上的，否则节点会默认继承单元的配置： 3．在&ldquo;管理端点安全配置&rdquo;的拓扑里，把所有单元、节点的入站、出站通道的配置都更新一下（刚才的操作只对入站通道进行配置了，这里还需要对出站通道进行配置）；依次更新单元和节点的出站通道的安全配置（通常入站和出站使用同一组密钥库/信任库以及SSL配置即可，因此不用新创建了，只需要把创建好的配置和端点进行绑定）： 更新单元出站通道配置： 更新节点出站通道配置： 各个端点入站/出站通道安全性配置都已经更新完毕： 三. 启用安全性，重启WAS环境，测试配置： 1．启用安全性（确认管理安全性和应用程序安全性是启用的，java 2 安全性是没有启用的）： 保存所有配置后进行节点同步，把配置变更同步到节点： 重启整个WAS环境（dmgr，nodeagent，appservers），访问管理控制台，由于浏览器里没有我们创建的证书的颁发机构的信息，访问会受到安全提示，通过点击&ldquo;添加例外&rdquo;，手动配置信任我们的证书： 点击&ldquo;获取证书&rdquo;，然后&ldquo;查看&rdquo;： 由于管理控制台这个应用是部署在dmgr上的，所以看到的是cellkey证书的详细信息（如果浏览器是IE，也可以通过在弹出的对话框上选择查看证书来查看证书详细内容）： 访问部署在节点下的appserver上的DefaultApplication的/snoop上下文，查看证书，可以看到nodekey证书的详细信息： 进行节点同步是成功的，说明dmgr和节点之间的SSL握手是成功的： 通过上面的测试可以看出，新的SSL配置已经生效。 附： 对于多节点的环境，需要把每个节点密钥库里的证书都导入到所有信任库里，利用上面第一部分里第5、6两步的方法不是很方便，需要花费很多的时间。在WAS6.1里，密钥库和信任库之间的证书交换可以在管理控制台上配置完成，相比于ikeyman，可以节省一些时间。 在节点的&ldquo;密钥库和证书&rdquo;页面里，选择一个密钥库和一个信任库，点击&ldquo;交换签署者&rdquo;： 选中密钥库中的个人证书，点击&ldquo;添加&rdquo;，加入到信任库的签署者证书列表里： 之后保存配置。 按照同样的步骤把每个节点下&ldquo;密钥库和证书&rdquo;列表中每个密钥库里的个人证书都分别导入到所有信任库里。 