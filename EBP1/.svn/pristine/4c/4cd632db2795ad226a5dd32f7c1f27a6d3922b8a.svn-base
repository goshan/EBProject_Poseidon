package com.ibm.p1.service.impl;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import com.ibm.p1.dao.CommunicationDao;
import com.ibm.p1.entity.Source;
import com.ibm.p1.service.AnalysisService;
import com.ibm.p1.service.CommunicationService;

public class CommunicationServiceImpl implements CommunicationService{
	private List<Source> allSource;
	private CommunicationDao communicationDao;
	
	
	public void setAllSource(List<Source> allSource) {
		this.allSource = allSource;
	}
	public List<Source> getAllSource() {
		return allSource;
	}

	public CommunicationDao getCommunicationDao() {
		return communicationDao;
	}
	public void setCommunicationDao(CommunicationDao communicationDao) {
		this.communicationDao = communicationDao;
	}


	public void submitSource(Source source) {
		// TODO Auto-generated method stub
		communicationDao.submitSource(source);
	}


	public Source getSourceById(int id) {
		// TODO Auto-generated method stub
		return communicationDao.getSourceById(id);
	}


	public List<Source> getAllSources() {
		// TODO Auto-generated method stub
		return communicationDao.getAllSources();
	}
	public List<Source> getEnoughNumOfSources(int num) {
		// TODO Auto-generated method stub
		allSource = communicationDao.getAllSources();
		int sourceSize = allSource.size();
		if(num <= sourceSize){
			allSource = communicationDao.getEnoughNumOfSources(num);
		}
		return allSource;
	}

	public void sourceAnalysis(int num, Source source,String dir) {
		// TODO Auto-generated method stub
		allSource = communicationDao.getAllSources();
		int sourceSize = allSource.size();
		if(num <= sourceSize){
			try {
				allSource = communicationDao.sourceAnalysis(num,source,dir);
				String content = source.getContent();
				int id = source.getSource_id();
				
				String path = dir+"sources.txt";
			    File fileName = new File(path);
				if(fileName.exists()){
					fileName.delete();
				}
			    fileName.createNewFile();
			    String sourceStr = "####"+String.valueOf(id)+"####"+"\r\n"+content+"\r\n"+"============================"+"\r\n";
				FileWriter writer = new FileWriter(path, true);
		        writer.write(sourceStr);
		        for(int i = 0 ;i<allSource.size()-1;i++){
		        	String allSourceStr = "####"+allSource.get(i).getSource_id()+"####"+"\r\n"+allSource.get(i).getContent()+"\r\n"+"============================"+"\r\n";
		        	writer.write(allSourceStr);
		        }
		        writer.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}else{
			try {
				allSource = communicationDao.sourceAnalysis(sourceSize,source,dir);
				String content = source.getContent();
				int id = source.getSource_id();
				
				String path = dir+"sources.txt";
			    File fileName = new File(path);
				if(fileName.exists()){
					fileName.delete();
				}
			    fileName.createNewFile();
			    String sourceStr = "####"+String.valueOf(id)+"####"+"\r\n"+content+"\r\n"+"============================"+"\r\n";
				FileWriter writer = new FileWriter(path, true);
		        writer.write(sourceStr);
		        for(int i = 0 ;i<allSource.size()-1;i++){
		        	String allSourceStr = "####"+allSource.get(i).getSource_id()+"####"+"\r\n"+allSource.get(i).getContent()+"\r\n"+"============================"+"\r\n";
		        	writer.write(allSourceStr);
		        }
		        writer.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	public Source getLastSource() {
		// TODO Auto-generated method stub
		return communicationDao.getLastSource();
	}
	public List<Source> searchSourceByContent(String content) {
		// TODO Auto-generated method stub
		return communicationDao.searchSourceByContent(content);
	}

}
